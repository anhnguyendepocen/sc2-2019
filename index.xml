<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on SC2</title>
    <link>https://mfasiolo.github.io/sc2-2019/</link>
    <description>Recent content in Home on SC2</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://mfasiolo.github.io/sc2-2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Using R&#39;s C API</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp/1_r_internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp/1_r_internals/</guid>
      <description>Creating C functions that are callable from R Calling expSmooth from R Creating R objects within C code    body { text-align: justify}  The purpose of this section is explaining how to interface R with C/C++ using the raw C API provided by R. In practice it is generally preferable to use the Rcpp package to interface R with C++, but it is useful to know how R’s C API work to have an idea of what is going on under the hood when you use Rcpp.</description>
    </item>
    
    <item>
      <title>Reproducible research</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/reproducibile-research/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/reproducibile-research/</guid>
      <description>A big computer, a complex algorithm and a long time does not equal science.
&amp;ndash; Robert Gentleman. SSC 2003, Halifax.
 Reproducible research refers to being able to reproduce the analysis and conclusions of a particular investigation given the same raw data. When the analysis requires significant computation, this requires being able to recreate the same computational environment and run the same code on the data.
It may be surprising that a lot of science involving computation is not reproducible.</description>
    </item>
    
    <item>
      <title>2. Exercises on chaotic maps and kernel regression smoothing</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp/2_exercises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp/2_exercises/</guid>
      <description>Simulation based inference on the Ricker model Adaptive kernel regression smoothing    body { text-align: justify}  Simulation based inference on the Ricker model Here we consider an extremely simple model for population dynamics, the Ricker map: \[ y_{t+1} = ry_te^{-y_t}, \] where \(y_t&amp;gt;0\) represents the size of the population at time \(t\) and \(r&amp;gt;0\) is its growth rate. The model can show a wide range of dynamics, depending on the value of \(r\).</description>
    </item>
    
    <item>
      <title>Literate programming</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/literate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/literate/</guid>
      <description>Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.
– Donald E. Knuth
 Literate programming was introduced by Donald Knuth in a 1984 article featuring the quote above.
In practice, literate programming involves writing source code that can be processed to produce
a document explaining what the program does, a program that can be executed.</description>
    </item>
    
    <item>
      <title>3. Rcpp</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp/3_rcpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp/3_rcpp/</guid>
      <description>An overview of R’s internal C API Rcpp Rcpp as an interface Rcpp in packages Variables and values   An overview of R’s internal C API See
Rcpp manual
http://adv-r.had.co.nz/C-interface.html
https://github.com/hadley/r-internals
https://cran.r-project.org/doc/manuals/r-release/R-ints.html
https://cran.r-project.org/doc/manuals/R-exts.html
 Rcpp Here we focus on Rcpp
The key aspect to note here is C++ programs: to operate, Rcpp needs not only R but also an addi- tional toolchain of a compiler, linker and more to be able to cre- ate binary object code extending R.</description>
    </item>
    
    <item>
      <title>Literate programming with LaTeX and LyX</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/latex-lyx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/latex-lyx/</guid>
      <description>It is straightforward to incorporate R code chunks in LaTeX using knitr.
For example, you can take the following code and paste it into a file with extension .Rnw. After doing so, you can open it with RStudio.
Before trying to compile the file (by clicking &amp;ldquo;Compile PDF&amp;rdquo;), first check in your global or project options that under the &amp;ldquo;Sweave&amp;rdquo; menu, &amp;ldquo;Weave Rnw files using:&amp;rdquo; is set to &amp;ldquo;knitr&amp;rdquo;. Otherwise, Sweave will be used, which requires a few modifications to the input file.</description>
    </item>
    
    <item>
      <title>Additional reading</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/reading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/reading/</guid>
      <description> Turing Way: Reproducibility Literate Programming SW Carpentry: Producing Reports With knitr R Markdown: The Definitive Guide  </description>
    </item>
    
    <item>
      <title>Problem 1: Multiples of 3 and 5</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/project-euler/problem1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/project-euler/problem1/</guid>
      <description>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
 A Solution
A simple approach to this problem is to
initialize a counter variable to 0; iterate over the integers between 1 and 999 (inclusive): if the integer is a multiple of 3 or 5, add it to the counter.</description>
    </item>
    
    <item>
      <title>Problem 2: Even Fibonacci numbers</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/project-euler/problem2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp_advanced/project-euler/problem2/</guid>
      <description>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
\[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \ldots\]
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 A Solution
Let \(F_1, F_2, \ldots\) denote the (non-standard) Fibonnaci sequence with \(F_1 = 1\) and \(F_2 = 2\).</description>
    </item>
    
  </channel>
</rss>