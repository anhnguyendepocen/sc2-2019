<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parallel Rcpp on SC2</title>
    <link>https://mfasiolo.github.io/sc2-2019/rcpp_advanced_iii/</link>
    <description>Recent content in Parallel Rcpp on SC2</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://mfasiolo.github.io/sc2-2019/rcpp_advanced_iii/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Using OpenMP in Rcpp</title>
      <link>https://mfasiolo.github.io/sc2-2019/rcpp_advanced_iii/1_openmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mfasiolo.github.io/sc2-2019/rcpp_advanced_iii/1_openmp/</guid>
      <description>Basic examples Parallel random number generation Using OMP in R packages    body { text-align: justify}  Basic examples library(RhpcBLASctl) omp_set_num_threads(4) library(Rcpp) sourceCpp(code = &amp;#39; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;Rcpp.h&amp;gt; // [[Rcpp::plugins(openmp)]] // [[Rcpp::export(wait_a_second)]] bool wait_a_second(int ncores) { #if defined(_OPENMP) #pragma omp parallel for num_threads(ncores) #endif for(size_t ii = 0; ii &amp;lt; 8; ii++) { sleep(1); } return 1; } &amp;#39;) system.time(wait_a_second(1))[3] ## elapsed ## 8.001 system.time(wait_a_second(4))[3] ## elapsed ## 2.</description>
    </item>
    
  </channel>
</rss>